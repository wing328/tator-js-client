/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediaSpec model module.
 * @module model/MediaSpec
 * @version 0.0.5
 */
class MediaSpec {
    /**
     * Constructs a new <code>MediaSpec</code>.
     * @alias module:model/MediaSpec
     * @param type {Number} Unique integer identifying a media type. Use -1 to automatically select the media type if only one media type exists in a project.
     * @param section {String} Media section name.
     * @param name {String} Name of the file.
     * @param md5 {String} MD5 sum of the media file.
     */
    constructor(type, section, name, md5) { 
        
        MediaSpec.initialize(this, type, section, name, md5);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, section, name, md5) { 
        obj['type'] = type;
        obj['section'] = section;
        obj['name'] = name;
        obj['md5'] = md5;
    }

    /**
     * Constructs a <code>MediaSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaSpec} obj Optional instance to populate.
     * @return {module:model/MediaSpec} The populated <code>MediaSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaSpec();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_url')) {
                obj['thumbnail_url'] = ApiClient.convertToType(data['thumbnail_url'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_gif_url')) {
                obj['thumbnail_gif_url'] = ApiClient.convertToType(data['thumbnail_gif_url'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('md5')) {
                obj['md5'] = ApiClient.convertToType(data['md5'], 'String');
            }
            if (data.hasOwnProperty('num_frames')) {
                obj['num_frames'] = ApiClient.convertToType(data['num_frames'], 'Number');
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('codec')) {
                obj['codec'] = ApiClient.convertToType(data['codec'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('summaryLevel')) {
                obj['summaryLevel'] = ApiClient.convertToType(data['summaryLevel'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MediaSpec.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['thumbnail_url'] && !(typeof data['thumbnail_url'] === 'string' || data['thumbnail_url'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got " + data['thumbnail_url']);
        }
        // ensure the json data is a string
        if (data['thumbnail_gif_url'] && !(typeof data['thumbnail_gif_url'] === 'string' || data['thumbnail_gif_url'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_gif_url` to be a primitive type in the JSON string but got " + data['thumbnail_gif_url']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['md5'] && !(typeof data['md5'] === 'string' || data['md5'] instanceof String)) {
            throw new Error("Expected the field `md5` to be a primitive type in the JSON string but got " + data['md5']);
        }
        // ensure the json data is a string
        if (data['codec'] && !(typeof data['codec'] === 'string' || data['codec'] instanceof String)) {
            throw new Error("Expected the field `codec` to be a primitive type in the JSON string but got " + data['codec']);
        }

        return true;
    }


}

MediaSpec.RequiredProperties = ["type", "section", "name", "md5"];

/**
 * Unique integer identifying a media type. Use -1 to automatically select the media type if only one media type exists in a project.
 * @member {Number} type
 */
MediaSpec.prototype['type'] = undefined;

/**
 * Group ID for the upload group of this media.
 * @member {String} gid
 */
MediaSpec.prototype['gid'] = undefined;

/**
 * Unique ID for the upload of this media.
 * @member {String} uid
 */
MediaSpec.prototype['uid'] = undefined;

/**
 * Upload URL for the image if this is an image type, URL of hosted original media if this is a video type. For video types this field is just for reference.
 * @member {String} url
 */
MediaSpec.prototype['url'] = undefined;

/**
 * Upload URL for the media thumbnail if already generated.
 * @member {String} thumbnail_url
 */
MediaSpec.prototype['thumbnail_url'] = undefined;

/**
 * Upload URL for the video gif thumbnail if already generated.
 * @member {String} thumbnail_gif_url
 */
MediaSpec.prototype['thumbnail_gif_url'] = undefined;

/**
 * Media section name.
 * @member {String} section
 */
MediaSpec.prototype['section'] = undefined;

/**
 * Name of the file.
 * @member {String} name
 */
MediaSpec.prototype['name'] = undefined;

/**
 * MD5 sum of the media file.
 * @member {String} md5
 */
MediaSpec.prototype['md5'] = undefined;

/**
 * Number of frames for videos.
 * @member {Number} num_frames
 */
MediaSpec.prototype['num_frames'] = undefined;

/**
 * Frame rate for videos.
 * @member {Number} fps
 */
MediaSpec.prototype['fps'] = undefined;

/**
 * Codec for videos.
 * @member {String} codec
 */
MediaSpec.prototype['codec'] = undefined;

/**
 * Horizontal resolution in pixels.
 * @member {Number} width
 */
MediaSpec.prototype['width'] = undefined;

/**
 * Vertical resolution in pixels.
 * @member {Number} height
 */
MediaSpec.prototype['height'] = undefined;

/**
 * If supplied, this video is best summarized at this frame interval
 * @member {Number} summaryLevel
 */
MediaSpec.prototype['summaryLevel'] = undefined;

/**
 * Attributes for the media
 * @member {Object} attributes
 */
MediaSpec.prototype['attributes'] = undefined;






export default MediaSpec;

