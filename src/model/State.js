/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The State model module.
 * @module model/State
 * @version 0.0.5
 */
class State {
    /**
     * Constructs a new <code>State</code>.
     * @alias module:model/State
     */
    constructor() { 
        
        State.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>State</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/State} obj Optional instance to populate.
     * @return {module:model/State} The populated <code>State</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new State();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], 'Number');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], ['Number']);
            }
            if (data.hasOwnProperty('localizations')) {
                obj['localizations'] = ApiClient.convertToType(data['localizations'], ['Number']);
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [['Number']]);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': AttributeValue});
            }
            if (data.hasOwnProperty('created_datetime')) {
                obj['created_datetime'] = ApiClient.convertToType(data['created_datetime'], 'Date');
            }
            if (data.hasOwnProperty('modified_datetime')) {
                obj['modified_datetime'] = ApiClient.convertToType(data['modified_datetime'], 'Date');
            }
            if (data.hasOwnProperty('modified_by')) {
                obj['modified_by'] = ApiClient.convertToType(data['modified_by'], 'Number');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('frame')) {
                obj['frame'] = ApiClient.convertToType(data['frame'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>State</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>State</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['media'])) {
            throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['localizations'])) {
            throw new Error("Expected the field `localizations` to be an array in the JSON data but got " + data['localizations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segments'])) {
            throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
        }

        return true;
    }


}



/**
 * Unique integer identifying the state.
 * @member {Number} id
 */
State.prototype['id'] = undefined;

/**
 * Unique integer identifying the entity type.
 * @member {Number} meta
 */
State.prototype['meta'] = undefined;

/**
 * List of media IDs that this state applies to.
 * @member {Array.<Number>} media
 */
State.prototype['media'] = undefined;

/**
 * List of localization IDs that this state applies to.
 * @member {Array.<Number>} localizations
 */
State.prototype['localizations'] = undefined;

/**
 * List of contiguous frame ranges where a localization associated state has localization data.
 * @member {Array.<Array.<Number>>} segments
 */
State.prototype['segments'] = undefined;

/**
 * Object containing attribute values.
 * @member {Object.<String, module:model/AttributeValue>} attributes
 */
State.prototype['attributes'] = undefined;

/**
 * Datetime this state was created.
 * @member {Date} created_datetime
 */
State.prototype['created_datetime'] = undefined;

/**
 * Datetime this state was last modified.
 * @member {Date} modified_datetime
 */
State.prototype['modified_datetime'] = undefined;

/**
 * Unique integer identifying the user who last modified this state.
 * @member {Number} modified_by
 */
State.prototype['modified_by'] = undefined;

/**
 * Unique integer identifying the user who created this state.
 * @member {Number} created_by
 */
State.prototype['created_by'] = undefined;

/**
 * Unique integer identifying the version.
 * @member {Number} version
 */
State.prototype['version'] = undefined;

/**
 * Frame number this state applies to.
 * @member {Number} frame
 */
State.prototype['frame'] = undefined;






export default State;

