/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeType from './AttributeType';

/**
 * The FileType model module.
 * @module model/FileType
 * @version 0.0.5
 */
class FileType {
    /**
     * Constructs a new <code>FileType</code>.
     * File type.
     * @alias module:model/FileType
     */
    constructor() { 
        
        FileType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileType} obj Optional instance to populate.
     * @return {module:model/FileType} The populated <code>FileType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileType();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('attribute_types')) {
                obj['attribute_types'] = ApiClient.convertToType(data['attribute_types'], [AttributeType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['attribute_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attribute_types'])) {
                throw new Error("Expected the field `attribute_types` to be an array in the JSON data but got " + data['attribute_types']);
            }
            // validate the optional field `attribute_types` (array)
            for (const item of data['attribute_types']) {
                AttributeType.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * Unique integer identifying a file type.
 * @member {Number} id
 */
FileType.prototype['id'] = undefined;

/**
 * Unique integer identifying project for this file type.
 * @member {Number} project
 */
FileType.prototype['project'] = undefined;

/**
 * Name of the file type.
 * @member {String} name
 */
FileType.prototype['name'] = undefined;

/**
 * Description of the file type.
 * @member {String} description
 * @default ''
 */
FileType.prototype['description'] = '';

/**
 * Attribute type definitions.
 * @member {Array.<module:model/AttributeType>} attribute_types
 */
FileType.prototype['attribute_types'] = undefined;






export default FileType;

