/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeValue model module.
 * @module model/AttributeValue
 * @version 0.0.5
 */
class AttributeValue {
    /**
     * Constructs a new <code>AttributeValue</code>.
     * Boolean, integer, float, string, datetime, [lon, lat], float array.
     * @alias module:model/AttributeValue
     * @param {(module:model/Boolean|module:model/Number|module:model/String|module:model/[Number])} The actual instance to initialize AttributeValue.
     */
    constructor(obj = null) {
        this.actualInstance = obj;
    }

    /**
     * Constructs a <code>AttributeValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeValue} obj Optional instance to populate.
     * @return {module:model/AttributeValue} The populated <code>AttributeValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (!data) {
            return new AttributeValue();
        }
        var match = 0;
        var errorMessages = [];
        try {
            obj = new AttributeValue(data);
            match++;
        } catch(err) {
            // json data failed to deserialize into Boolean
            errorMessages.push("Failed to construct Boolean: " + err)
        }

        try {
            // validate array of string
            if (!(typeof data === 'number' && data % 1 != 0)) {
                throw new Error("Invalid array items. Must be number. Data: " + JSON.stringify(data));
            }
            obj = new AttributeValue(data);
            match++;
        } catch(err) {
            // json data failed to deserialize into Number
            errorMessages.push("Failed to construct Number: " + err)
        }

        try {
            // validate array of string
            if (!(typeof data === 'string')) {
                throw new Error("Invalid data. Must be string. Data: " + JSON.stringify(data));
            }
            obj = new AttributeValue(data);
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            // validate array data type
            if (!Array.isArray(data)) {
                throw new Error("Invalid data type. Expecting array. Data: " + data);
            }
            if (data.length < 1 {
                throw new Error("Invalid array size. Minimim: 1. Data: " + data);
            }
            // validate array of string
            for (const item of data) {
                if (!(typeof data === 'number' && data % 1 != 0)) {
                    throw new Error("Invalid array items. Must be number. Data: " + JSON.stringify(data));
                }
            }
            obj = new AttributeValue(data);
            match++;
        } catch(err) {
            // json data failed to deserialize into [Number]
            errorMessages.push("Failed to construct [Number]: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AttributeValue` with oneOf schemas Boolean, Number, String, [Number]. JSON data: " + JSON.stringify(data));
        } else if (match === 0) {
            throw new Error("No match found constructing `AttributeValue` with oneOf schemas Boolean, Number, String, [Number]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            return obj;
        }
    }

    /**
     * Gets the actaul instance, which can be <code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>[Number]</code>.
     * @return {(module:model/Boolean|module:model/Number|module:model/String|module:model/[Number])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actaul instance, which can be <code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>[Number]</code>.
     * @param {(module:model/Boolean|module:model/Number|module:model/String|module:model/[Number])} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AttributeValue.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual intance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

}


AttributeValue.OneOf = ["Boolean", "Number", "String", "[Number]"];

export default AttributeValue;

