/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectSpec model module.
 * @module model/ProjectSpec
 * @version 0.0.5
 */
class ProjectSpec {
    /**
     * Constructs a new <code>ProjectSpec</code>.
     * @alias module:model/ProjectSpec
     * @param name {String} Name of the project.
     * @param organization {Number} Unique integer identifying an organization.
     */
    constructor(name, organization) { 
        
        ProjectSpec.initialize(this, name, organization);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, organization) { 
        obj['name'] = name;
        obj['organization'] = organization;
    }

    /**
     * Constructs a <code>ProjectSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectSpec} obj Optional instance to populate.
     * @return {module:model/ProjectSpec} The populated <code>ProjectSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectSpec();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'Number');
            }
            if (data.hasOwnProperty('enable_downloads')) {
                obj['enable_downloads'] = ApiClient.convertToType(data['enable_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'Number');
            }
            if (data.hasOwnProperty('upload_bucket')) {
                obj['upload_bucket'] = ApiClient.convertToType(data['upload_bucket'], 'Number');
            }
            if (data.hasOwnProperty('backup_bucket')) {
                obj['backup_bucket'] = ApiClient.convertToType(data['backup_bucket'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectSpec.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}

ProjectSpec.RequiredProperties = ["name", "organization"];

/**
 * Name of the project.
 * @member {String} name
 */
ProjectSpec.prototype['name'] = undefined;

/**
 * Summary of the project.
 * @member {String} summary
 * @default ''
 */
ProjectSpec.prototype['summary'] = '';

/**
 * Unique integer identifying an organization.
 * @member {Number} organization
 */
ProjectSpec.prototype['organization'] = undefined;

/**
 * Whether the UI should allow downloads for this project.
 * @member {Boolean} enable_downloads
 * @default true
 */
ProjectSpec.prototype['enable_downloads'] = true;

/**
 * Unique integer identifying a bucket.
 * @member {Number} bucket
 */
ProjectSpec.prototype['bucket'] = undefined;

/**
 * Unique integer identifying a bucket for uploads.
 * @member {Number} upload_bucket
 */
ProjectSpec.prototype['upload_bucket'] = undefined;

/**
 * Unique integer identifying a bucket for backups.
 * @member {Number} backup_bucket
 */
ProjectSpec.prototype['backup_bucket'] = undefined;






export default ProjectSpec;

