/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioDefinition from './AudioDefinition';
import AuxiliaryFileDefinition from './AuxiliaryFileDefinition';
import ConcatDefinition from './ConcatDefinition';
import ImageDefinition from './ImageDefinition';
import LiveDefinition from './LiveDefinition';
import VideoDefinition from './VideoDefinition';

/**
 * The MediaFiles model module.
 * @module model/MediaFiles
 * @version 0.0.5
 */
class MediaFiles {
    /**
     * Constructs a new <code>MediaFiles</code>.
     * Object containing upload urls for the transcoded file and corresponding &#x60;VideoDefinition&#x60;.
     * @alias module:model/MediaFiles
     */
    constructor() { 
        
        MediaFiles.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaFiles</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaFiles} obj Optional instance to populate.
     * @return {module:model/MediaFiles} The populated <code>MediaFiles</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaFiles();

            if (data.hasOwnProperty('archival')) {
                obj['archival'] = ApiClient.convertToType(data['archival'], [VideoDefinition]);
            }
            if (data.hasOwnProperty('streaming')) {
                obj['streaming'] = ApiClient.convertToType(data['streaming'], [VideoDefinition]);
            }
            if (data.hasOwnProperty('concat')) {
                obj['concat'] = ApiClient.convertToType(data['concat'], [ConcatDefinition]);
            }
            if (data.hasOwnProperty('audio')) {
                obj['audio'] = ApiClient.convertToType(data['audio'], [AudioDefinition]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], [ImageDefinition]);
            }
            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = ApiClient.convertToType(data['attachment'], [AuxiliaryFileDefinition]);
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], [ImageDefinition]);
            }
            if (data.hasOwnProperty('thumbnail_gif')) {
                obj['thumbnail_gif'] = ApiClient.convertToType(data['thumbnail_gif'], [ImageDefinition]);
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], [LiveDefinition]);
            }
            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['Number']);
            }
            if (data.hasOwnProperty('frameOffset')) {
                obj['frameOffset'] = ApiClient.convertToType(data['frameOffset'], ['Number']);
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], ['Number']);
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaFiles</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaFiles</code>.
     */
    static validateJSON(data) {
        if (data['archival']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['archival'])) {
                throw new Error("Expected the field `archival` to be an array in the JSON data but got " + data['archival']);
            }
            // validate the optional field `archival` (array)
            for (const item of data['archival']) {
                VideoDefinition.validateJsonObject(item);
            };
        }
        if (data['streaming']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streaming'])) {
                throw new Error("Expected the field `streaming` to be an array in the JSON data but got " + data['streaming']);
            }
            // validate the optional field `streaming` (array)
            for (const item of data['streaming']) {
                VideoDefinition.validateJsonObject(item);
            };
        }
        if (data['concat']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['concat'])) {
                throw new Error("Expected the field `concat` to be an array in the JSON data but got " + data['concat']);
            }
            // validate the optional field `concat` (array)
            for (const item of data['concat']) {
                ConcatDefinition.validateJsonObject(item);
            };
        }
        if (data['audio']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audio'])) {
                throw new Error("Expected the field `audio` to be an array in the JSON data but got " + data['audio']);
            }
            // validate the optional field `audio` (array)
            for (const item of data['audio']) {
                AudioDefinition.validateJsonObject(item);
            };
        }
        if (data['image']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['image'])) {
                throw new Error("Expected the field `image` to be an array in the JSON data but got " + data['image']);
            }
            // validate the optional field `image` (array)
            for (const item of data['image']) {
                ImageDefinition.validateJsonObject(item);
            };
        }
        if (data['attachment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachment'])) {
                throw new Error("Expected the field `attachment` to be an array in the JSON data but got " + data['attachment']);
            }
            // validate the optional field `attachment` (array)
            for (const item of data['attachment']) {
                AuxiliaryFileDefinition.validateJsonObject(item);
            };
        }
        if (data['thumbnail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thumbnail'])) {
                throw new Error("Expected the field `thumbnail` to be an array in the JSON data but got " + data['thumbnail']);
            }
            // validate the optional field `thumbnail` (array)
            for (const item of data['thumbnail']) {
                ImageDefinition.validateJsonObject(item);
            };
        }
        if (data['thumbnail_gif']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thumbnail_gif'])) {
                throw new Error("Expected the field `thumbnail_gif` to be an array in the JSON data but got " + data['thumbnail_gif']);
            }
            // validate the optional field `thumbnail_gif` (array)
            for (const item of data['thumbnail_gif']) {
                ImageDefinition.validateJsonObject(item);
            };
        }
        if (data['live']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['live'])) {
                throw new Error("Expected the field `live` to be an array in the JSON data but got " + data['live']);
            }
            // validate the optional field `live` (array)
            for (const item of data['live']) {
                LiveDefinition.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['frameOffset'])) {
            throw new Error("Expected the field `frameOffset` to be an array in the JSON data but got " + data['frameOffset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['layout'])) {
            throw new Error("Expected the field `layout` to be an array in the JSON data but got " + data['layout']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/VideoDefinition>} archival
 */
MediaFiles.prototype['archival'] = undefined;

/**
 * @member {Array.<module:model/VideoDefinition>} streaming
 */
MediaFiles.prototype['streaming'] = undefined;

/**
 * @member {Array.<module:model/ConcatDefinition>} concat
 */
MediaFiles.prototype['concat'] = undefined;

/**
 * @member {Array.<module:model/AudioDefinition>} audio
 */
MediaFiles.prototype['audio'] = undefined;

/**
 * @member {Array.<module:model/ImageDefinition>} image
 */
MediaFiles.prototype['image'] = undefined;

/**
 * @member {Array.<module:model/AuxiliaryFileDefinition>} attachment
 */
MediaFiles.prototype['attachment'] = undefined;

/**
 * @member {Array.<module:model/ImageDefinition>} thumbnail
 */
MediaFiles.prototype['thumbnail'] = undefined;

/**
 * @member {Array.<module:model/ImageDefinition>} thumbnail_gif
 */
MediaFiles.prototype['thumbnail_gif'] = undefined;

/**
 * @member {Array.<module:model/LiveDefinition>} live
 */
MediaFiles.prototype['live'] = undefined;

/**
 * If multi-stream list of ids of sub-videos
 * @member {Array.<Number>} ids
 */
MediaFiles.prototype['ids'] = undefined;

/**
 * Frame of sub-video, offset from media in slot 0.
 * @member {Array.<Number>} frameOffset
 */
MediaFiles.prototype['frameOffset'] = undefined;

/**
 * 2-element array to define rxc layout
 * @member {Array.<Number>} layout
 */
MediaFiles.prototype['layout'] = undefined;

/**
 * Resolution to fetch on each sub-video
 * @member {Number} quality
 */
MediaFiles.prototype['quality'] = undefined;






export default MediaFiles;

