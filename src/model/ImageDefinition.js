/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageDefinition model module.
 * @module model/ImageDefinition
 * @version 0.0.5
 */
class ImageDefinition {
    /**
     * Constructs a new <code>ImageDefinition</code>.
     * @alias module:model/ImageDefinition
     * @param path {String} Relative URL to the file.
     * @param resolution {Array.<Number>} Resolution of the video in pixels (height, width).
     */
    constructor(path, resolution) { 
        
        ImageDefinition.initialize(this, path, resolution);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, resolution) { 
        obj['path'] = path;
        obj['resolution'] = resolution;
    }

    /**
     * Constructs a <code>ImageDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDefinition} obj Optional instance to populate.
     * @return {module:model/ImageDefinition} The populated <code>ImageDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDefinition();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], ['Number']);
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('http_auth')) {
                obj['http_auth'] = ApiClient.convertToType(data['http_auth'], 'String');
            }
            if (data.hasOwnProperty('mime')) {
                obj['mime'] = ApiClient.convertToType(data['mime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageDefinition.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resolution'])) {
            throw new Error("Expected the field `resolution` to be an array in the JSON data but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['http_auth'] && !(typeof data['http_auth'] === 'string' || data['http_auth'] instanceof String)) {
            throw new Error("Expected the field `http_auth` to be a primitive type in the JSON string but got " + data['http_auth']);
        }
        // ensure the json data is a string
        if (data['mime'] && !(typeof data['mime'] === 'string' || data['mime'] instanceof String)) {
            throw new Error("Expected the field `mime` to be a primitive type in the JSON string but got " + data['mime']);
        }

        return true;
    }


}

ImageDefinition.RequiredProperties = ["path", "resolution"];

/**
 * Relative URL to the file.
 * @member {String} path
 */
ImageDefinition.prototype['path'] = undefined;

/**
 * File size in bytes.
 * @member {Number} size
 */
ImageDefinition.prototype['size'] = undefined;

/**
 * Resolution of the video in pixels (height, width).
 * @member {Array.<Number>} resolution
 */
ImageDefinition.prototype['resolution'] = undefined;

/**
 * If supplied will use this instead of currently connected host, e.g. https://example.com
 * @member {String} host
 */
ImageDefinition.prototype['host'] = undefined;

/**
 * If specified will be used for HTTP authorization in request for media, i.e. \"bearer TOKEN\".
 * @member {String} http_auth
 */
ImageDefinition.prototype['http_auth'] = undefined;

/**
 * Example mime: \"image/jpg\".
 * @member {String} mime
 */
ImageDefinition.prototype['mime'] = undefined;






export default ImageDefinition;

