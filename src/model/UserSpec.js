/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserSpec model module.
 * @module model/UserSpec
 * @version 0.0.5
 */
class UserSpec {
    /**
     * Constructs a new <code>UserSpec</code>.
     * @alias module:model/UserSpec
     * @param username {String} Username of user.
     * @param firstName {String} First name of user.
     * @param lastName {String} Last name of user.
     * @param email {String} Email address of user.
     * @param password {String} Account password.
     */
    constructor(username, firstName, lastName, email, password) { 
        
        UserSpec.initialize(this, username, firstName, lastName, email, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, firstName, lastName, email, password) { 
        obj['username'] = username;
        obj['first_name'] = firstName;
        obj['last_name'] = lastName;
        obj['email'] = email;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>UserSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserSpec} obj Optional instance to populate.
     * @return {module:model/UserSpec} The populated <code>UserSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserSpec();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('registration_token')) {
                obj['registration_token'] = ApiClient.convertToType(data['registration_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserSpec.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['registration_token'] && !(typeof data['registration_token'] === 'string' || data['registration_token'] instanceof String)) {
            throw new Error("Expected the field `registration_token` to be a primitive type in the JSON string but got " + data['registration_token']);
        }

        return true;
    }


}

UserSpec.RequiredProperties = ["username", "first_name", "last_name", "email", "password"];

/**
 * Username of user.
 * @member {String} username
 */
UserSpec.prototype['username'] = undefined;

/**
 * First name of user.
 * @member {String} first_name
 */
UserSpec.prototype['first_name'] = undefined;

/**
 * Last name of user.
 * @member {String} last_name
 */
UserSpec.prototype['last_name'] = undefined;

/**
 * Email address of user.
 * @member {String} email
 */
UserSpec.prototype['email'] = undefined;

/**
 * Account password.
 * @member {String} password
 */
UserSpec.prototype['password'] = undefined;

/**
 * Registration token generated by Invitation object.
 * @member {String} registration_token
 */
UserSpec.prototype['registration_token'] = undefined;






export default UserSpec;

