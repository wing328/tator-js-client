/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';
import AutocompleteService from './AutocompleteService';

/**
 * The AttributeTypeUpdateNewAttributeType model module.
 * @module model/AttributeTypeUpdateNewAttributeType
 * @version 0.0.5
 */
class AttributeTypeUpdateNewAttributeType {
    /**
     * Constructs a new <code>AttributeTypeUpdateNewAttributeType</code>.
     * @alias module:model/AttributeTypeUpdateNewAttributeType
     */
    constructor() { 
        
        AttributeTypeUpdateNewAttributeType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeTypeUpdateNewAttributeType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeTypeUpdateNewAttributeType} obj Optional instance to populate.
     * @return {module:model/AttributeTypeUpdateNewAttributeType} The populated <code>AttributeTypeUpdateNewAttributeType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeTypeUpdateNewAttributeType();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dtype')) {
                obj['dtype'] = ApiClient.convertToType(data['dtype'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = AttributeValue.constructFromObject(data['default']);
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], ['String']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('autocomplete')) {
                obj['autocomplete'] = AutocompleteService.constructFromObject(data['autocomplete']);
            }
            if (data.hasOwnProperty('use_current')) {
                obj['use_current'] = ApiClient.convertToType(data['use_current'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeTypeUpdateNewAttributeType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeTypeUpdateNewAttributeType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dtype'] && !(typeof data['dtype'] === 'string' || data['dtype'] instanceof String)) {
            throw new Error("Expected the field `dtype` to be a primitive type in the JSON string but got " + data['dtype']);
        }
        // validate the optional field `default`
        if (data['default']) { // data not null
          AttributeValue.validateJSON(data['default']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['choices'])) {
            throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // validate the optional field `autocomplete`
        if (data['autocomplete']) { // data not null
          AutocompleteService.validateJSON(data['autocomplete']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }

        return true;
    }


}



/**
 * Name of the attribute.
 * @member {String} name
 */
AttributeTypeUpdateNewAttributeType.prototype['name'] = undefined;

/**
 * Description of the attribute.
 * @member {String} description
 */
AttributeTypeUpdateNewAttributeType.prototype['description'] = undefined;

/**
 * Data type of the attribute.
 * @member {module:model/AttributeTypeUpdateNewAttributeType.DtypeEnum} dtype
 */
AttributeTypeUpdateNewAttributeType.prototype['dtype'] = undefined;

/**
 * True if this attribute is required for POST requests.
 * @member {Boolean} required
 */
AttributeTypeUpdateNewAttributeType.prototype['required'] = undefined;

/**
 * Integer specifying relative order this attribute is displayed in the UI. Negative values are hidden by default.
 * @member {Number} order
 */
AttributeTypeUpdateNewAttributeType.prototype['order'] = undefined;

/**
 * @member {module:model/AttributeValue} default
 */
AttributeTypeUpdateNewAttributeType.prototype['default'] = undefined;

/**
 * Lower bound for int or float dtype.
 * @member {Number} minimum
 */
AttributeTypeUpdateNewAttributeType.prototype['minimum'] = undefined;

/**
 * Upper bound for int or float dtype.
 * @member {Number} maximum
 */
AttributeTypeUpdateNewAttributeType.prototype['maximum'] = undefined;

/**
 * Array of possible values; required for enum dtype.
 * @member {Array.<String>} choices
 */
AttributeTypeUpdateNewAttributeType.prototype['choices'] = undefined;

/**
 * Array of labels for enum dtype.
 * @member {Array.<String>} labels
 */
AttributeTypeUpdateNewAttributeType.prototype['labels'] = undefined;

/**
 * @member {module:model/AutocompleteService} autocomplete
 */
AttributeTypeUpdateNewAttributeType.prototype['autocomplete'] = undefined;

/**
 * True to use current datetime as default for datetime dtype.
 * @member {Boolean} use_current
 */
AttributeTypeUpdateNewAttributeType.prototype['use_current'] = undefined;

/**
 * Number of elements for `float_array` dtype.
 * @member {Number} size
 */
AttributeTypeUpdateNewAttributeType.prototype['size'] = undefined;

/**
 * Available options: disabled|long_string|start_frame|end_frame|start_frame_check|end_frame_check   Multiple options can be chained together separated by white space. \"disabled\" will not allow the user to edit the attribute in the Tator GUI. Create a text area string if \"long_string\" is combined with \"string\" dtype. \"start_frame\" and \"end_frame\" used in conjunction with \"attr_style_range\" interpolation. \"start_frame_check and \"end_frame_check\" are used in conjunction with \"attr_style_range\" interpolation. \"range_set and in_video_check\" is used in conjunction with \"attr_style_range\" interpolation. When associated with a bool, these checks will result in Tator GUI changes with the corresponding start_frame and end_frame attributes.
 * @member {String} style
 */
AttributeTypeUpdateNewAttributeType.prototype['style'] = undefined;





/**
 * Allowed values for the <code>dtype</code> property.
 * @enum {String}
 * @readonly
 */
AttributeTypeUpdateNewAttributeType['DtypeEnum'] = {

    /**
     * value: "bool"
     * @const
     */
    "bool": "bool",

    /**
     * value: "int"
     * @const
     */
    "int": "int",

    /**
     * value: "float"
     * @const
     */
    "float": "float",

    /**
     * value: "enum"
     * @const
     */
    "enum": "enum",

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "datetime"
     * @const
     */
    "datetime": "datetime",

    /**
     * value: "geopos"
     * @const
     */
    "geopos": "geopos",

    /**
     * value: "float_array"
     * @const
     */
    "float_array": "float_array"
};



export default AttributeTypeUpdateNewAttributeType;

