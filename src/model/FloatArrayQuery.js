/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FloatArrayQuery model module.
 * @module model/FloatArrayQuery
 * @version 0.0.5
 */
class FloatArrayQuery {
    /**
     * Constructs a new <code>FloatArrayQuery</code>.
     * @alias module:model/FloatArrayQuery
     * @param name {String} Name of the attribute.
     * @param center {Array.<Number>} Center of the query.
     */
    constructor(name, center) { 
        
        FloatArrayQuery.initialize(this, name, center);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, center) { 
        obj['name'] = name;
        obj['center'] = center;
    }

    /**
     * Constructs a <code>FloatArrayQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloatArrayQuery} obj Optional instance to populate.
     * @return {module:model/FloatArrayQuery} The populated <code>FloatArrayQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloatArrayQuery();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('center')) {
                obj['center'] = ApiClient.convertToType(data['center'], ['Number']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('lower_bound')) {
                obj['lower_bound'] = ApiClient.convertToType(data['lower_bound'], 'Number');
            }
            if (data.hasOwnProperty('upper_bound')) {
                obj['upper_bound'] = ApiClient.convertToType(data['upper_bound'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloatArrayQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloatArrayQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FloatArrayQuery.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['center'])) {
            throw new Error("Expected the field `center` to be an array in the JSON data but got " + data['center']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }

        return true;
    }


}

FloatArrayQuery.RequiredProperties = ["name", "center"];

/**
 * Name of the attribute.
 * @member {String} name
 */
FloatArrayQuery.prototype['name'] = undefined;

/**
 * Center of the query.
 * @member {Array.<Number>} center
 */
FloatArrayQuery.prototype['center'] = undefined;

/**
 * Distance metric from center of query.
 * @member {module:model/FloatArrayQuery.MetricEnum} metric
 * @default 'l2norm'
 */
FloatArrayQuery.prototype['metric'] = 'l2norm';

/**
 * Return results with metric greater than this value.
 * @member {Number} lower_bound
 * @default 0
 */
FloatArrayQuery.prototype['lower_bound'] = 0;

/**
 * Return results with metric less than this value.
 * @member {Number} upper_bound
 */
FloatArrayQuery.prototype['upper_bound'] = undefined;

/**
 * Order in which results should be returned.
 * @member {module:model/FloatArrayQuery.OrderEnum} order
 * @default 'asc'
 */
FloatArrayQuery.prototype['order'] = 'asc';





/**
 * Allowed values for the <code>metric</code> property.
 * @enum {String}
 * @readonly
 */
FloatArrayQuery['MetricEnum'] = {

    /**
     * value: "l2norm"
     * @const
     */
    "l2norm": "l2norm",

    /**
     * value: "l1norm"
     * @const
     */
    "l1norm": "l1norm"
};


/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
FloatArrayQuery['OrderEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default FloatArrayQuery;

