/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobNode model module.
 * @module model/JobNode
 * @version 0.0.5
 */
class JobNode {
    /**
     * Constructs a new <code>JobNode</code>.
     * Represents a step or node (for DAGs) in a job.
     * @alias module:model/JobNode
     */
    constructor() { 
        
        JobNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobNode} obj Optional instance to populate.
     * @return {module:model/JobNode} The populated <code>JobNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobNode();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], ['String']);
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Date');
            }
            if (data.hasOwnProperty('stop_time')) {
                obj['stop_time'] = ApiClient.convertToType(data['stop_time'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['children'])) {
            throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
        }
        // ensure the json data is a string
        if (data['task'] && !(typeof data['task'] === 'string' || data['task'] instanceof String)) {
            throw new Error("Expected the field `task` to be a primitive type in the JSON string but got " + data['task']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Unique identifier of the job node.
 * @member {String} id
 */
JobNode.prototype['id'] = undefined;

/**
 * @member {Array.<String>} children
 */
JobNode.prototype['children'] = undefined;

/**
 * Name of task performed by this node.
 * @member {String} task
 */
JobNode.prototype['task'] = undefined;

/**
 * Status of this node.
 * @member {String} status
 */
JobNode.prototype['status'] = undefined;

/**
 * Start time of this node.
 * @member {Date} start_time
 */
JobNode.prototype['start_time'] = undefined;

/**
 * Stop time of this node.
 * @member {Date} stop_time
 */
JobNode.prototype['stop_time'] = undefined;






export default JobNode;

