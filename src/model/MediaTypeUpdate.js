/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArchiveConfig from './ArchiveConfig';
import ResolutionConfig from './ResolutionConfig';

/**
 * The MediaTypeUpdate model module.
 * @module model/MediaTypeUpdate
 * @version 0.0.5
 */
class MediaTypeUpdate {
    /**
     * Constructs a new <code>MediaTypeUpdate</code>.
     * @alias module:model/MediaTypeUpdate
     */
    constructor() { 
        
        MediaTypeUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaTypeUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaTypeUpdate} obj Optional instance to populate.
     * @return {module:model/MediaTypeUpdate} The populated <code>MediaTypeUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaTypeUpdate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('file_format')) {
                obj['file_format'] = ApiClient.convertToType(data['file_format'], 'String');
            }
            if (data.hasOwnProperty('archive_config')) {
                obj['archive_config'] = ApiClient.convertToType(data['archive_config'], [ArchiveConfig]);
            }
            if (data.hasOwnProperty('streaming_config')) {
                obj['streaming_config'] = ApiClient.convertToType(data['streaming_config'], [ResolutionConfig]);
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
            if (data.hasOwnProperty('default_volume')) {
                obj['default_volume'] = ApiClient.convertToType(data['default_volume'], 'Number');
            }
            if (data.hasOwnProperty('default_box')) {
                obj['default_box'] = ApiClient.convertToType(data['default_box'], 'Number');
            }
            if (data.hasOwnProperty('default_line')) {
                obj['default_line'] = ApiClient.convertToType(data['default_line'], 'Number');
            }
            if (data.hasOwnProperty('default_dot')) {
                obj['default_dot'] = ApiClient.convertToType(data['default_dot'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaTypeUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaTypeUpdate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['file_format'] && !(typeof data['file_format'] === 'string' || data['file_format'] instanceof String)) {
            throw new Error("Expected the field `file_format` to be a primitive type in the JSON string but got " + data['file_format']);
        }
        if (data['archive_config']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['archive_config'])) {
                throw new Error("Expected the field `archive_config` to be an array in the JSON data but got " + data['archive_config']);
            }
            // validate the optional field `archive_config` (array)
            for (const item of data['archive_config']) {
                ArchiveConfig.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['streaming_config'])) {
            throw new Error("Expected the field `streaming_config` to be an array in the JSON data but got " + data['streaming_config']);
        }

        return true;
    }


}



/**
 * Name of the media type.
 * @member {String} name
 */
MediaTypeUpdate.prototype['name'] = undefined;

/**
 * Description of the media type.
 * @member {String} description
 */
MediaTypeUpdate.prototype['description'] = undefined;

/**
 * File extension. If omitted, any recognized file extension for the given dtype is accepted for upload. Do not include a dot prefix.
 * @member {String} file_format
 */
MediaTypeUpdate.prototype['file_format'] = undefined;

/**
 * Archive config definitions. If null, the raw file will be uploaded to Tator.
 * @member {Array.<module:model/ArchiveConfig>} archive_config
 */
MediaTypeUpdate.prototype['archive_config'] = undefined;

/**
 * Streaming config definition. If null, the default will be used.
 * @member {Array.<module:model/ResolutionConfig>} streaming_config
 */
MediaTypeUpdate.prototype['streaming_config'] = undefined;

/**
 * Visible configuration
 * @member {Boolean} visible
 */
MediaTypeUpdate.prototype['visible'] = undefined;

/**
 * Default audio volume for this media type.
 * @member {Number} default_volume
 */
MediaTypeUpdate.prototype['default_volume'] = undefined;

/**
 * Unique integer identifying default box type for drawing.
 * @member {Number} default_box
 */
MediaTypeUpdate.prototype['default_box'] = undefined;

/**
 * Unique integer identifying default line type for drawing.
 * @member {Number} default_line
 */
MediaTypeUpdate.prototype['default_line'] = undefined;

/**
 * Unique integer identifying default dot type for drawing.
 * @member {Number} default_dot
 */
MediaTypeUpdate.prototype['default_dot'] = undefined;






export default MediaTypeUpdate;

