/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The LeafSuggestion model module.
 * @module model/LeafSuggestion
 * @version 0.0.5
 */
class LeafSuggestion {
    /**
     * Constructs a new <code>LeafSuggestion</code>.
     * @alias module:model/LeafSuggestion
     */
    constructor() { 
        
        LeafSuggestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeafSuggestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeafSuggestion} obj Optional instance to populate.
     * @return {module:model/LeafSuggestion} The populated <code>LeafSuggestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeafSuggestion();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': AttributeValue});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeafSuggestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeafSuggestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }

        return true;
    }


}



/**
 * Name of the suggestion.
 * @member {String} value
 */
LeafSuggestion.prototype['value'] = undefined;

/**
 * Group of the suggestion.
 * @member {String} group
 */
LeafSuggestion.prototype['group'] = undefined;

/**
 * Auxiliary data associated with the leaf.
 * @member {Object.<String, module:model/AttributeValue>} data
 */
LeafSuggestion.prototype['data'] = undefined;






export default LeafSuggestion;

