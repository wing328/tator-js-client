/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadInfo model module.
 * @module model/UploadInfo
 * @version 0.0.5
 */
class UploadInfo {
    /**
     * Constructs a new <code>UploadInfo</code>.
     * @alias module:model/UploadInfo
     */
    constructor() { 
        
        UploadInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadInfo} obj Optional instance to populate.
     * @return {module:model/UploadInfo} The populated <code>UploadInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadInfo();

            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], ['String']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('upload_id')) {
                obj['upload_id'] = ApiClient.convertToType(data['upload_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['urls'])) {
            throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['upload_id'] && !(typeof data['upload_id'] === 'string' || data['upload_id'] instanceof String)) {
            throw new Error("Expected the field `upload_id` to be a primitive type in the JSON string but got " + data['upload_id']);
        }

        return true;
    }


}



/**
 * One or more URLs for upload via one PUT request per URL.
 * @member {Array.<String>} urls
 */
UploadInfo.prototype['urls'] = undefined;

/**
 * An object key that can be supplied to the `Transcode` or `Media` or `File` endpoint after the file has been uploaded.
 * @member {String} key
 */
UploadInfo.prototype['key'] = undefined;

/**
 * An upload ID that can be supplied to the `UploadCompletion` endpoint after the file has been uploaded. Only contains a value if `num_parts` > 1.
 * @member {String} upload_id
 */
UploadInfo.prototype['upload_id'] = undefined;






export default UploadInfo;

