/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EncodeConfig model module.
 * @module model/EncodeConfig
 * @version 0.0.5
 */
class EncodeConfig {
    /**
     * Constructs a new <code>EncodeConfig</code>.
     * Settings for archival video encode. Any additional properties will be passed as command line arguments to ffmpeg. The copy setting does no encoding and simply copies the original file.
     * @alias module:model/EncodeConfig
     * @extends Object
     */
    constructor() { 
        
        EncodeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncodeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncodeConfig} obj Optional instance to populate.
     * @return {module:model/EncodeConfig} The populated <code>EncodeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncodeConfig();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('vcodec')) {
                obj['vcodec'] = ApiClient.convertToType(data['vcodec'], 'String');
            }
            if (data.hasOwnProperty('crf')) {
                obj['crf'] = ApiClient.convertToType(data['crf'], 'Number');
            }
            if (data.hasOwnProperty('preset')) {
                obj['preset'] = ApiClient.convertToType(data['preset'], 'String');
            }
            if (data.hasOwnProperty('movflags')) {
                obj['movflags'] = ApiClient.convertToType(data['movflags'], 'String');
            }
            if (data.hasOwnProperty('tune')) {
                obj['tune'] = ApiClient.convertToType(data['tune'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncodeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncodeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['vcodec'] && !(typeof data['vcodec'] === 'string' || data['vcodec'] instanceof String)) {
            throw new Error("Expected the field `vcodec` to be a primitive type in the JSON string but got " + data['vcodec']);
        }
        // ensure the json data is a string
        if (data['preset'] && !(typeof data['preset'] === 'string' || data['preset'] instanceof String)) {
            throw new Error("Expected the field `preset` to be a primitive type in the JSON string but got " + data['preset']);
        }
        // ensure the json data is a string
        if (data['movflags'] && !(typeof data['movflags'] === 'string' || data['movflags'] instanceof String)) {
            throw new Error("Expected the field `movflags` to be a primitive type in the JSON string but got " + data['movflags']);
        }
        // ensure the json data is a string
        if (data['tune'] && !(typeof data['tune'] === 'string' || data['tune'] instanceof String)) {
            throw new Error("Expected the field `tune` to be a primitive type in the JSON string but got " + data['tune']);
        }

        return true;
    }


}



/**
 * Video codec.
 * @member {module:model/EncodeConfig.VcodecEnum} vcodec
 * @default 'hevc'
 */
EncodeConfig.prototype['vcodec'] = 'hevc';

/**
 * Constant rate factor.
 * @member {Number} crf
 * @default 23
 */
EncodeConfig.prototype['crf'] = 23;

/**
 * Preset for ffmpeg encoding.
 * @member {module:model/EncodeConfig.PresetEnum} preset
 * @default 'fast'
 */
EncodeConfig.prototype['preset'] = 'fast';

/**
 * Movflags to specify to packager
 * @member {String} movflags
 * @default ''
 */
EncodeConfig.prototype['movflags'] = '';

/**
 * Tune setting for ffmpeg.
 * @member {module:model/EncodeConfig.TuneEnum} tune
 * @default 'fastdecode'
 */
EncodeConfig.prototype['tune'] = 'fastdecode';





/**
 * Allowed values for the <code>vcodec</code> property.
 * @enum {String}
 * @readonly
 */
EncodeConfig['VcodecEnum'] = {

    /**
     * value: "copy"
     * @const
     */
    "copy": "copy",

    /**
     * value: "h264"
     * @const
     */
    "h264": "h264",

    /**
     * value: "hevc"
     * @const
     */
    "hevc": "hevc"
};


/**
 * Allowed values for the <code>preset</code> property.
 * @enum {String}
 * @readonly
 */
EncodeConfig['PresetEnum'] = {

    /**
     * value: "ultrafast"
     * @const
     */
    "ultrafast": "ultrafast",

    /**
     * value: "superfast"
     * @const
     */
    "superfast": "superfast",

    /**
     * value: "veryfast"
     * @const
     */
    "veryfast": "veryfast",

    /**
     * value: "faster"
     * @const
     */
    "faster": "faster",

    /**
     * value: "fast"
     * @const
     */
    "fast": "fast",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "slow"
     * @const
     */
    "slow": "slow",

    /**
     * value: "slower"
     * @const
     */
    "slower": "slower",

    /**
     * value: "veryslow"
     * @const
     */
    "veryslow": "veryslow"
};


/**
 * Allowed values for the <code>tune</code> property.
 * @enum {String}
 * @readonly
 */
EncodeConfig['TuneEnum'] = {

    /**
     * value: "film"
     * @const
     */
    "film": "film",

    /**
     * value: "animation"
     * @const
     */
    "animation": "animation",

    /**
     * value: "grain"
     * @const
     */
    "grain": "grain",

    /**
     * value: "stillimage"
     * @const
     */
    "stillimage": "stillimage",

    /**
     * value: "fastdecode"
     * @const
     */
    "fastdecode": "fastdecode",

    /**
     * value: "zerolatency"
     * @const
     */
    "zerolatency": "zerolatency",

    /**
     * value: "psnr"
     * @const
     */
    "psnr": "psnr",

    /**
     * value: "ssim"
     * @const
     */
    "ssim": "ssim"
};



export default EncodeConfig;

