/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Applet model module.
 * @module model/Applet
 * @version 0.0.5
 */
class Applet {
    /**
     * Constructs a new <code>Applet</code>.
     * Applet spec.
     * @alias module:model/Applet
     */
    constructor() { 
        
        Applet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Applet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Applet} obj Optional instance to populate.
     * @return {module:model/Applet} The populated <code>Applet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Applet();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('html_file')) {
                obj['html_file'] = ApiClient.convertToType(data['html_file'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Applet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Applet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['html_file'] && !(typeof data['html_file'] === 'string' || data['html_file'] instanceof String)) {
            throw new Error("Expected the field `html_file` to be a primitive type in the JSON string but got " + data['html_file']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }

        return true;
    }


}



/**
 * Unique integer identifying the applet
 * @member {Number} id
 */
Applet.prototype['id'] = undefined;

/**
 * Unique integer identifying the project associated with the applet
 * @member {Number} project
 */
Applet.prototype['project'] = undefined;

/**
 * Name of applet
 * @member {String} name
 */
Applet.prototype['name'] = undefined;

/**
 * Server URL to applet HTML file
 * @member {String} html_file
 */
Applet.prototype['html_file'] = undefined;

/**
 * Description of applet
 * @member {String} description
 */
Applet.prototype['description'] = undefined;

/**
 * List of categories the applet belongs to
 * @member {Array.<String>} categories
 */
Applet.prototype['categories'] = undefined;






export default Applet;

