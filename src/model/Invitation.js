/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Invitation model module.
 * @module model/Invitation
 * @version 0.0.5
 */
class Invitation {
    /**
     * Constructs a new <code>Invitation</code>.
     * Invitation object.
     * @alias module:model/Invitation
     */
    constructor() { 
        
        Invitation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Invitation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invitation} obj Optional instance to populate.
     * @return {module:model/Invitation} The populated <code>Invitation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invitation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'Number');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'Number');
            }
            if (data.hasOwnProperty('created_username')) {
                obj['created_username'] = ApiClient.convertToType(data['created_username'], 'String');
            }
            if (data.hasOwnProperty('created_datetime')) {
                obj['created_datetime'] = ApiClient.convertToType(data['created_datetime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invitation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invitation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_username'] && !(typeof data['created_username'] === 'string' || data['created_username'] instanceof String)) {
            throw new Error("Expected the field `created_username` to be a primitive type in the JSON string but got " + data['created_username']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }

        return true;
    }


}



/**
 * Unique integer identifying an invitation.
 * @member {Number} id
 */
Invitation.prototype['id'] = undefined;

/**
 * Unique integer identifying an organization.
 * @member {Number} organization
 */
Invitation.prototype['organization'] = undefined;

/**
 * Unique integer identifying a user.
 * @member {Number} created_by
 */
Invitation.prototype['created_by'] = undefined;

/**
 * Username of creator of the invitation.
 * @member {String} created_username
 */
Invitation.prototype['created_username'] = undefined;

/**
 * Datetime this invitation was created.
 * @member {Date} created_datetime
 */
Invitation.prototype['created_datetime'] = undefined;

/**
 * Status of the invitation.
 * @member {module:model/Invitation.StatusEnum} status
 */
Invitation.prototype['status'] = undefined;

/**
 * Email address of invitee.
 * @member {String} email
 */
Invitation.prototype['email'] = undefined;

/**
 * User permission level for the organization.
 * @member {module:model/Invitation.PermissionEnum} permission
 */
Invitation.prototype['permission'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Invitation['StatusEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted"
};


/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
Invitation['PermissionEnum'] = {

    /**
     * value: "Member"
     * @const
     */
    "Member": "Member",

    /**
     * value: "Admin"
     * @const
     */
    "Admin": "Admin"
};



export default Invitation;

