/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Membership model module.
 * @module model/Membership
 * @version 0.0.5
 */
class Membership {
    /**
     * Constructs a new <code>Membership</code>.
     * Membership object.
     * @alias module:model/Membership
     */
    constructor() { 
        
        Membership.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Membership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Membership} obj Optional instance to populate.
     * @return {module:model/Membership} The populated <code>Membership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Membership();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('default_version')) {
                obj['default_version'] = ApiClient.convertToType(data['default_version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Membership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Membership</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }

        return true;
    }


}



/**
 * Unique integer identifying a membership.
 * @member {Number} id
 */
Membership.prototype['id'] = undefined;

/**
 * Unique integer identifying project for this membership.
 * @member {Number} project
 */
Membership.prototype['project'] = undefined;

/**
 * Unique integer identifying a user.
 * @member {Number} user
 */
Membership.prototype['user'] = undefined;

/**
 * Username for the membership.
 * @member {String} username
 */
Membership.prototype['username'] = undefined;

/**
 * First name of user.
 * @member {String} first_name
 */
Membership.prototype['first_name'] = undefined;

/**
 * Last name of user.
 * @member {String} last_name
 */
Membership.prototype['last_name'] = undefined;

/**
 * Email address of user.
 * @member {String} email
 */
Membership.prototype['email'] = undefined;

/**
 * User permission level for the project.
 * @member {module:model/Membership.PermissionEnum} permission
 */
Membership.prototype['permission'] = undefined;

/**
 * Unique integer identifying a version.
 * @member {Number} default_version
 */
Membership.prototype['default_version'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
Membership['PermissionEnum'] = {

    /**
     * value: "View Only"
     * @const
     */
    "View Only": "View Only",

    /**
     * value: "Can Edit"
     * @const
     */
    "Can Edit": "Can Edit",

    /**
     * value: "Can Transfer"
     * @const
     */
    "Can Transfer": "Can Transfer",

    /**
     * value: "Can Execute"
     * @const
     */
    "Can Execute": "Can Execute",

    /**
     * value: "Full Control"
     * @const
     */
    "Full Control": "Full Control"
};



export default Membership;

