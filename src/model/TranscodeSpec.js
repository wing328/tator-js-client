/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TranscodeSpec model module.
 * @module model/TranscodeSpec
 * @version 0.0.5
 */
class TranscodeSpec {
    /**
     * Constructs a new <code>TranscodeSpec</code>.
     * @alias module:model/TranscodeSpec
     * @param type {Number} Unique integer identifying a video type.
     * @param gid {String} UUID generated for the job group. This value may be associated with messages generated during upload via the `Progress` endpoint, or it may be newly generated. The transcode workflow will use this value to generate progress messages.
     * @param uid {String} UUID generated for the individual job. This value may be associated with messages generated during upload via the `Progress` endpoint, or it may be newly generated. The transcode workflow will use this value to generate progress messages.
     * @param url {String} Upload URL for the raw video.
     * @param section {String} Media section name to upload to.
     * @param name {String} Name of the file.
     * @param md5 {String} MD5 sum of the media file.
     */
    constructor(type, gid, uid, url, section, name, md5) { 
        
        TranscodeSpec.initialize(this, type, gid, uid, url, section, name, md5);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, gid, uid, url, section, name, md5) { 
        obj['type'] = type;
        obj['gid'] = gid;
        obj['uid'] = uid;
        obj['url'] = url;
        obj['section'] = section;
        obj['name'] = name;
        obj['md5'] = md5;
    }

    /**
     * Constructs a <code>TranscodeSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscodeSpec} obj Optional instance to populate.
     * @return {module:model/TranscodeSpec} The populated <code>TranscodeSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranscodeSpec();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('md5')) {
                obj['md5'] = ApiClient.convertToType(data['md5'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('media_id')) {
                obj['media_id'] = ApiClient.convertToType(data['media_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranscodeSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranscodeSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TranscodeSpec.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['md5'] && !(typeof data['md5'] === 'string' || data['md5'] instanceof String)) {
            throw new Error("Expected the field `md5` to be a primitive type in the JSON string but got " + data['md5']);
        }

        return true;
    }


}

TranscodeSpec.RequiredProperties = ["type", "gid", "uid", "url", "section", "name", "md5"];

/**
 * Unique integer identifying a video type.
 * @member {Number} type
 */
TranscodeSpec.prototype['type'] = undefined;

/**
 * UUID generated for the job group. This value may be associated with messages generated during upload via the `Progress` endpoint, or it may be newly generated. The transcode workflow will use this value to generate progress messages.
 * @member {String} gid
 */
TranscodeSpec.prototype['gid'] = undefined;

/**
 * UUID generated for the individual job. This value may be associated with messages generated during upload via the `Progress` endpoint, or it may be newly generated. The transcode workflow will use this value to generate progress messages.
 * @member {String} uid
 */
TranscodeSpec.prototype['uid'] = undefined;

/**
 * Upload URL for the raw video.
 * @member {String} url
 */
TranscodeSpec.prototype['url'] = undefined;

/**
 * Size of the file in bytes. This parameter is required if the supplied URL is external (not produced by `DownloadInfo` and cannot accept HEAD requests.
 * @member {Number} size
 */
TranscodeSpec.prototype['size'] = undefined;

/**
 * Media section name to upload to.
 * @member {String} section
 */
TranscodeSpec.prototype['section'] = undefined;

/**
 * Name of the file.
 * @member {String} name
 */
TranscodeSpec.prototype['name'] = undefined;

/**
 * MD5 sum of the media file.
 * @member {String} md5
 */
TranscodeSpec.prototype['md5'] = undefined;

/**
 * Attributes to apply upon upload
 * @member {Object} attributes
 */
TranscodeSpec.prototype['attributes'] = undefined;

/**
 * ID of an existing media. If given, this media will be used for the transcode operation rather than creating a new object.
 * @member {Number} media_id
 */
TranscodeSpec.prototype['media_id'] = undefined;






export default TranscodeSpec;

