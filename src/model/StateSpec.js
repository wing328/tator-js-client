/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The StateSpec model module.
 * @module model/StateSpec
 * @version 0.0.5
 */
class StateSpec {
    /**
     * Constructs a new <code>StateSpec</code>.
     * @alias module:model/StateSpec
     * @extends Object
     * @param type {Number} Unique integer identifying a state type.
     * @param mediaIds {Array.<Number>} List of media IDs that this state applies to.
     */
    constructor(type, mediaIds) { 
        
        StateSpec.initialize(this, type, mediaIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, mediaIds) { 
        obj['type'] = type;
        obj['media_ids'] = mediaIds;
    }

    /**
     * Constructs a <code>StateSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StateSpec} obj Optional instance to populate.
     * @return {module:model/StateSpec} The populated <code>StateSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StateSpec();

            ApiClient.constructFromObject(data, obj, 'AttributeValue');
            

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('media_ids')) {
                obj['media_ids'] = ApiClient.convertToType(data['media_ids'], ['Number']);
            }
            if (data.hasOwnProperty('localization_ids')) {
                obj['localization_ids'] = ApiClient.convertToType(data['localization_ids'], ['Number']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('frame')) {
                obj['frame'] = ApiClient.convertToType(data['frame'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StateSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StateSpec</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StateSpec.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media_ids'])) {
            throw new Error("Expected the field `media_ids` to be an array in the JSON data but got " + data['media_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['localization_ids'])) {
            throw new Error("Expected the field `localization_ids` to be an array in the JSON data but got " + data['localization_ids']);
        }

        return true;
    }


}

StateSpec.RequiredProperties = ["type", "media_ids"];

/**
 * Unique integer identifying a state type.
 * @member {Number} type
 */
StateSpec.prototype['type'] = undefined;

/**
 * List of media IDs that this state applies to.
 * @member {Array.<Number>} media_ids
 */
StateSpec.prototype['media_ids'] = undefined;

/**
 * List of localization IDs that this state applies to.
 * @member {Array.<Number>} localization_ids
 */
StateSpec.prototype['localization_ids'] = undefined;

/**
 * Unique integer identifying the version.
 * @member {Number} version
 */
StateSpec.prototype['version'] = undefined;

/**
 * Frame number this state applies to.
 * @member {Number} frame
 */
StateSpec.prototype['frame'] = undefined;






export default StateSpec;

