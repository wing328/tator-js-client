/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import Fill from './Fill';

/**
 * The ColorMap model module.
 * @module model/ColorMap
 * @version 0.0.5
 */
class ColorMap {
    /**
     * Constructs a new <code>ColorMap</code>.
     * Maps an attribute value or version to a color/alpha. Use &#x60;key&#x60; and &#x60;map&#x60; (optionally &#x60;alpha_ranges&#x60;) to map an attribute value to colors. Use &#x60;version&#x60; to map version IDs to colors.
     * @alias module:model/ColorMap
     */
    constructor() { 
        
        ColorMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColorMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColorMap} obj Optional instance to populate.
     * @return {module:model/ColorMap} The populated <code>ColorMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColorMap();

            if (data.hasOwnProperty('default')) {
                obj['default'] = Color.constructFromObject(data['default']);
            }
            if (data.hasOwnProperty('defaultFill')) {
                obj['defaultFill'] = Fill.constructFromObject(data['defaultFill']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('map')) {
                obj['map'] = ApiClient.convertToType(data['map'], {'String': Color});
            }
            if (data.hasOwnProperty('fillMap')) {
                obj['fillMap'] = ApiClient.convertToType(data['fillMap'], {'String': Fill});
            }
            if (data.hasOwnProperty('alpha_ranges')) {
                obj['alpha_ranges'] = ApiClient.convertToType(data['alpha_ranges'], {'String': Array});
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], {'String': Color});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColorMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColorMap</code>.
     */
    static validateJSON(data) {
        // validate the optional field `default`
        if (data['default']) { // data not null
          Color.validateJSON(data['default']);
        }
        // validate the optional field `defaultFill`
        if (data['defaultFill']) { // data not null
          Fill.validateJSON(data['defaultFill']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} default
 */
ColorMap.prototype['default'] = undefined;

/**
 * @member {module:model/Fill} defaultFill
 */
ColorMap.prototype['defaultFill'] = undefined;

/**
 * Attribute name.
 * @member {String} key
 */
ColorMap.prototype['key'] = undefined;

/**
 * Map of attribute values to colors.
 * @member {Object.<String, module:model/Color>} map
 */
ColorMap.prototype['map'] = undefined;

/**
 * Map of attribute values to fill types.
 * @member {Object.<String, module:model/Fill>} fillMap
 */
ColorMap.prototype['fillMap'] = undefined;

/**
 * Map of attribute values to alpha level.
 * @member {Object.<String, Array.<Number>>} alpha_ranges
 */
ColorMap.prototype['alpha_ranges'] = undefined;

/**
 * Map of version IDs to colors.
 * @member {Object.<String, module:model/Color>} version
 */
ColorMap.prototype['version'] = undefined;






export default ColorMap;

