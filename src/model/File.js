/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The File model module.
 * @module model/File
 * @version 0.0.5
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * Non-media file spec.
     * @alias module:model/File
     */
    constructor() { 
        
        File.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'Number');
            }
            if (data.hasOwnProperty('created_datetime')) {
                obj['created_datetime'] = ApiClient.convertToType(data['created_datetime'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'Number');
            }
            if (data.hasOwnProperty('modified_datetime')) {
                obj['modified_datetime'] = ApiClient.convertToType(data['modified_datetime'], 'Date');
            }
            if (data.hasOwnProperty('modified_by')) {
                obj['modified_by'] = ApiClient.convertToType(data['modified_by'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': AttributeValue});
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * Unique integer identifying the non-media file
 * @member {Number} id
 */
File.prototype['id'] = undefined;

/**
 * Unique integer identifying the project associated with the file
 * @member {Number} project
 */
File.prototype['project'] = undefined;

/**
 * Datetime this file was created
 * @member {Date} created_datetime
 */
File.prototype['created_datetime'] = undefined;

/**
 * User that created this file
 * @member {Number} created_by
 */
File.prototype['created_by'] = undefined;

/**
 * Datetime this file was created
 * @member {Date} modified_datetime
 */
File.prototype['modified_datetime'] = undefined;

/**
 * User who last edited this file
 * @member {Number} modified_by
 */
File.prototype['modified_by'] = undefined;

/**
 * Relative URL to the file
 * @member {String} path
 */
File.prototype['path'] = undefined;

/**
 * Name of file
 * @member {String} name
 */
File.prototype['name'] = undefined;

/**
 * Description of file
 * @member {String} description
 */
File.prototype['description'] = undefined;

/**
 * Object containing attribute values
 * @member {Object.<String, module:model/AttributeValue>} attributes
 */
File.prototype['attributes'] = undefined;

/**
 * Unique integer identifying FileType of this File object.
 * @member {Number} meta
 */
File.prototype['meta'] = undefined;






export default File;

