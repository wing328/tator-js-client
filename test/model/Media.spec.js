/**
 * Tator REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Tator);
  }
}(this, function(expect, Tator) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Tator.Media();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Media', function() {
    it('should create an instance of Media', function() {
      // uncomment below and update the code to test Media
      //var instance = new Tator.Media();
      //expect(instance).to.be.a(Tator.Media);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property mediaFiles (base name: "media_files")', function() {
      // uncomment below and update the code to test the property mediaFiles
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property lastEditStart (base name: "last_edit_start")', function() {
      // uncomment below and update the code to test the property lastEditStart
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property lastEditEnd (base name: "last_edit_end")', function() {
      // uncomment below and update the code to test the property lastEditEnd
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property meta (base name: "meta")', function() {
      // uncomment below and update the code to test the property meta
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property createdDatetime (base name: "created_datetime")', function() {
      // uncomment below and update the code to test the property createdDatetime
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property modifiedDatetime (base name: "modified_datetime")', function() {
      // uncomment below and update the code to test the property modifiedDatetime
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property modifiedBy (base name: "modified_by")', function() {
      // uncomment below and update the code to test the property modifiedBy
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property md5 (base name: "md5")', function() {
      // uncomment below and update the code to test the property md5
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property numFrames (base name: "num_frames")', function() {
      // uncomment below and update the code to test the property numFrames
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property fps (base name: "fps")', function() {
      // uncomment below and update the code to test the property fps
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property codec (base name: "codec")', function() {
      // uncomment below and update the code to test the property codec
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property summaryLevel (base name: "summaryLevel")', function() {
      // uncomment below and update the code to test the property summaryLevel
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property gid (base name: "gid")', function() {
      // uncomment below and update the code to test the property gid
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property archiveState (base name: "archive_state")', function() {
      // uncomment below and update the code to test the property archiveState
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

    it('should have the property archiveStatusDate (base name: "archive_status_date")', function() {
      // uncomment below and update the code to test the property archiveStatusDate
      //var instance = new Tator.Media();
      //expect(instance).to.be();
    });

  });

}));
